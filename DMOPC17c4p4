import java.io.*;
import java.util.*;
public class Main {



    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer in;
    
    

    public static void main(String[] args) throws IOException {
    int N=readInt();
    int []guarded=new int[N];
    int []num_guarded=new int[N];
    
        for(int i=0;i<N;i++){
            guarded[i]=readInt();
        }
   
        int []days_blocked = new int[N];
        for(int i=0;i<n;i++)
            days_blocked[guarded[i]]++;
        
        int []order = new int[N];
        for(int i=0;i<N;i++)order[i]=i;

        Arrays.sort(order, (int a,int b)->{
            // return 0 if a==b
            // return <0 if a<b
            // return >0 if a>b
            return -Integer.compare(days_blocked[a], days_blocked[b]);
        });

        // unordered set fast for checking if contains
        HashSet<Integer> robbed_days = new HashSet<>();

        // for each bank, what days is it blocked
        List days_when_guarded[] = new List[N];
        for(int i=0;i<N;i++)
            days_when_guarded[guarded[i]].add(i);


        // loop through banks ordered by # of robbed days
        for(int i=0;i<N;i++){
            // find first day that isn't blocked
            // Bank: 2,3,4
            // Check: 3,4,5
            int bank = order[i];
            int day_to_rob = -1;
            for(Integer blocked:days_when_guarded[bank])
            {
                // Check if we can rob on this day
                int day_to_check = (blocked+1) % N;
                
                // Guarded
                if(guarded[day_to_check]==bank) continue;

                // Already robbed another bank on this day
                if(robbed_days.contains(day_to_check)) continue;

                day_to_rob = day_to_check;
                break;
            }

            if(day_to_rob == -1){
                // couldn't find day to rob on
                return -1;
            }

            robbed_days.put(day_to_rob);
            output[i] = day_to_rob;
        }
    }
    static String next() throws IOException {
        while (in == null || !in.hasMoreTokens())
            in = new StringTokenizer(br.readLine());
        return in.nextToken();
    }
 
    static long readLong() throws IOException {
        return Long.parseLong(next());
    }
 
    static int readInt() throws IOException {
        return Integer.parseInt(next());
    }
 
    static double readDouble() throws IOException {
        return Double.parseDouble(next());
    }
 
    static char readChar() throws IOException {
        return next().charAt(0);
    }

    static String readLine() throws IOException {
        return br.readLine();
    }
    
}